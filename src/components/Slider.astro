---
// window.addEventListener('load', () => {
//   const reel = document.querySelector('.reel') as HTMLElement;
//   const boxes = reel.querySelectorAll('.l-box');
//   const middleIndex = Math.floor(boxes.length / 2);
//   let scrollPosition = 0;

//   for (let i = 0; i < middleIndex; i++) {
//     const box = boxes[i] as HTMLElement; // Assert that each box is an HTMLElement
//     scrollPosition += box.offsetWidth + parseInt(getComputedStyle(box).marginRight);
//   }

//   scrollPosition -= (window.innerWidth - (boxes[middleIndex] as HTMLElement).offsetWidth) / 2;

//   reel.scrollLeft = scrollPosition;
// });
---

<!-- <div class="slider | l-canvas--full-width">
  <div class="slider__slides">
    <div class="l-box l-frame">1</div>
    <div class="l-box l-frame">2</div>
    <div class="l-box l-frame">3</div>
  </div>
  <div class="slider__controls | l-cluster">
    <span>x</span>
    <span>x</span>
  </div>
</div> -->

<div class="l-canvas--full-width">
  <div class="reel | u-mbs-l-xl">
    <div class="l-box l-frame">
      <img src="images/image-slide-1.jpg" alt="">
    </div>
    <div class="l-box l-frame">
      <img src="images/image-slide-2.jpg" alt="">
    </div>
    <div class="l-box l-frame">
      <img src="images/image-slide-3.jpg" alt="">
    </div>
    <div class="l-box l-frame">
      <img src="images/image-slide-4.jpg" alt="">
    </div>
    <!-- <div class="l-box l-frame">
      <img src="images/image-slide-5.jpg" alt="">
    </div> -->
  </div>
</div>

<script>
  window.addEventListener('load', () => {
    const reel = document.querySelector('.reel') as HTMLElement;
    const boxes = reel.querySelectorAll('.l-box');

    const scrollWidth = reel.scrollWidth;
    const visibleWidth = reel.offsetWidth;
    let centeringAdjustment = (scrollWidth - visibleWidth) / 2;

    // Check if the number of items is even
    if (boxes.length % 2 === 0) {
      // Ensure the element is treated as an HTMLElement to access offsetWidth
      const firstBox = boxes[0] as HTMLElement;
      const style = getComputedStyle(firstBox);
      let boxWidth = firstBox.offsetWidth; // Now correctly typed as HTMLElement
      let marginLeft = parseInt(style.marginLeft);
      let marginRight = parseInt(style.marginRight);

      // Adjust the centering to the box prior to the middle
      centeringAdjustment -= (boxWidth + marginLeft + marginRight) / 2;
    }

    // Set the scroll position to the adjusted center
    reel.scrollLeft = centeringAdjustment;
  });
</script>

<style lang="scss">
  // @import '../styles/20-mixins/media-query.scss';

  .reel {
    display: flex;
    block-size: min(50vh, 42vw);
    overflow-x: auto;
    overflow-y: hidden;
    scrollbar-color: #fff #000;
    padding-inline: var(--space-gutter);

    & .l-box {
      --space-box: 0;
    }
  }

  .reel::-webkit-scrollbar {
    block-size: 1rem;
  }
  .reel::-webkit-scrollbar-track {
    background-color: #000;
  }
  .reel::-webkit-scrollbar-thumb {
    background-color: #000;
    background-image: linear-gradient(#000 0, #000 0.25rem, #fff 0.25rem, #fff 0.75rem, #000 0.75rem);
  }

  .reel > * {
    flex: 0 0 auto;
  }

  .reel > img {
    block-size: 100%;
    flex-basis: auto;
    inline-size: auto;
  }

  .reel > * + * {
    margin-inline-start: var(--space-gutter-s);
  }

  .reel.overflowing {
    // padding-block-end: 1rem;
  }
</style>