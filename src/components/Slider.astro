---

---

<div class="l-canvas--full-width">
  <div class="reel | u-mbs-l-xl">
    <a href="#" class="l-box l-frame">
      <img src="images/image-slide-1.jpg" alt="">
    </a>
    <a href="#" class="l-box l-frame">
      <img src="images/image-slide-2.jpg" alt="">
    </a>
    <a href="#" class="l-box l-frame">
      <img src="images/image-slide-3.jpg" alt="">
    </a>
    <a href="#" class="l-box l-frame">
      <img src="images/image-slide-4.jpg" alt="">
    </a>
    <a href="#" class="l-box l-frame">
      <img src="images/image-slide-5.jpg" alt="">
    </a>
  </div>
</div>

<script>
  window.addEventListener('load', () => {
    const reel = document.querySelector('.reel') as HTMLElement;
    const boxes = reel.querySelectorAll('.l-box');

    const scrollWidth = reel.scrollWidth;
    const visibleWidth = reel.offsetWidth;
    let centeringAdjustment = (scrollWidth - visibleWidth) / 2;

    // Check if the number of items is even
    if (boxes.length % 2 === 0) {
      // Ensure the element is treated as an HTMLElement to access offsetWidth
      const lastBox = boxes[boxes.length - 1] as HTMLElement;
      const style = getComputedStyle(lastBox);
      let boxWidth = lastBox.offsetWidth; // Includes content, padding, and border, but not margin
      let marginLeft = parseInt(style.marginLeft);

      // Adjust the centering to the box prior to the middle
      // No need to adjust for border width in boxWidth calculation, as offsetWidth already includes it
      centeringAdjustment -= (boxWidth + marginLeft) / 2;
    }

    // Set the scroll position to the adjusted center
    reel.scrollLeft = centeringAdjustment;
  });
</script>

<style lang="scss">
  // @import '../styles/20-mixins/media-query.scss';

  .reel {
    display: flex;
    block-size: min(50vh, 42vw);
    overflow-x: auto;
    overflow-y: hidden;
    scrollbar-color: #fff #000;
    padding-inline: var(--space-gutter);

    & .l-box {
      --space-box: 0;
    }
  }

  .reel::-webkit-scrollbar {
    block-size: 1rem;
  }
  .reel::-webkit-scrollbar-track {
    background-color: #000;
  }
  .reel::-webkit-scrollbar-thumb {
    background-color: #000;
    background-image: linear-gradient(#000 0, #000 0.25rem, #fff 0.25rem, #fff 0.75rem, #000 0.75rem);
  }

  .reel > * {
    flex: 0 0 auto;
  }

  .reel > * + * {
    margin-inline-start: var(--space-gutter-s);
  }

  .reel.overflowing {
    // padding-block-end: 1rem;
  }
</style>